<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            font-family: 'Courier New', monospace;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            color: white;
        }

        .game-container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        h1 {
            font-size: 3em;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        #gameCanvas {
            border: 4px solid #ffffff;
            border-radius: 10px;
            background: #000;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        .score {
            font-size: 1.5em;
            margin: 20px 0;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .controls {
            margin-top: 20px;
            font-size: 1.1em;
            opacity: 0.9;
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            border: 3px solid #ff6b6b;
            display: none;
            z-index: 1000;
        }

        .game-over h2 {
            color: #ff6b6b;
            margin-bottom: 15px;
        }

        button {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 1.1em;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Courier New', monospace;
            margin-top: 15px;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .pause-btn {
            background: linear-gradient(45deg, #4ecdc4, #44a08d);
            margin: 20px 10px;
        }

        .pause-btn:hover {
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .score.animate {
            animation: pulse 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>üêç SNAKE GAME</h1>
        <div class="score">Score: <span id="score">0</span> | High Score: <span id="highScore">0</span></div>
        <canvas id="gameCanvas" width="400" height="400"></canvas>
        <div class="controls">
            <button class="pause-btn" onclick="togglePause()">‚è∏Ô∏è Pause</button>
            <button class="pause-btn" onclick="resetGame()">üîÑ Reset</button>
        </div>
        <div class="controls">
            Use arrow keys or WASD to control the snake
        </div>
    </div>

    <div class="game-over" id="gameOver">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button onclick="resetGame()">Play Again</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const highScoreElement = document.getElementById('highScore');
        const gameOverElement = document.getElementById('gameOver');
        const finalScoreElement = document.getElementById('finalScore');

        // Game variables
        const gridSize = 20;
        const tileCount = canvas.width / gridSize;

        let snake = [{ x: 10, y: 10 }];
        let food = {};
        let dx = 0;
        let dy = 0;
        let score = 0;
        let highScore = localStorage.getItem('snakeHighScore') || 0;
        let gameRunning = true;
        let isPaused = false;

        highScoreElement.textContent = highScore;

        // Initialize game
        function init() {
            snake = [{ x: 10, y: 10 }];
            dx = 0;
            dy = 0;
            score = 0;
            gameRunning = true;
            isPaused = false;
            scoreElement.textContent = score;
            gameOverElement.style.display = 'none';
            generateFood();
            gameLoop();
        }

        // Generate random food position
        function generateFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            
            // Make sure food doesn't spawn on snake
            for (let segment of snake) {
                if (segment.x === food.x && segment.y === food.y) {
                    generateFood();
                    return;
                }
            }
        }

        // Draw everything
        function draw() {
            // Clear canvas with gradient background
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, '#0f0f23');
            gradient.addColorStop(1, '#1a1a2e');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake with gradient
            snake.forEach((segment, index) => {
                const alpha = 1 - (index * 0.1);
                const hue = (120 + index * 10) % 360;
                ctx.fillStyle = `hsla(${hue}, 70%, 50%, ${alpha})`;
                ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
                
                // Add shine effect to head
                if (index === 0) {
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                    ctx.fillRect(segment.x * gridSize + 2, segment.y * gridSize + 2, gridSize - 8, gridSize - 8);
                }
            });

            // Draw food with pulsing effect
            const time = Date.now() * 0.005;
            const pulseSize = Math.sin(time) * 2;
            ctx.fillStyle = '#ff6b6b';
            ctx.fillRect(food.x * gridSize - pulseSize, food.y * gridSize - pulseSize, 
                        gridSize + pulseSize * 2, gridSize + pulseSize * 2);
            
            // Food shine
            ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
            ctx.fillRect(food.x * gridSize + 4, food.y * gridSize + 4, gridSize - 8, gridSize - 8);

            // Draw pause overlay
            if (isPaused) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'white';
                ctx.font = '30px Courier New';
                ctx.textAlign = 'center';
                ctx.fillText('PAUSED', canvas.width / 2, canvas.height / 2);
            }
        }

        // Update game state
        function update() {
            if (!gameRunning || isPaused) return;

            const head = { x: snake[0].x + dx, y: snake[0].y + dy };

            // Check wall collision
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }

            // Check self collision
            for (let segment of snake) {
                if (head.x === segment.x && head.y === segment.y) {
                    gameOver();
                    return;
                }
            }

            snake.unshift(head);

            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                scoreElement.classList.add('animate');
                setTimeout(() => scoreElement.classList.remove('animate'), 300);
                
                if (score > highScore) {
                    highScore = score;
                    highScoreElement.textContent = highScore;
                    localStorage.setItem('snakeHighScore', highScore);
                }
                
                generateFood();
            } else {
                snake.pop();
            }
        }

        // Game over
        function gameOver() {
            gameRunning = false;
            finalScoreElement.textContent = score;
            gameOverElement.style.display = 'block';
        }

        // Toggle pause
        function togglePause() {
            isPaused = !isPaused;
            const pauseBtn = document.querySelector('.pause-btn');
            pauseBtn.textContent = isPaused ? '‚ñ∂Ô∏è Resume' : '‚è∏Ô∏è Pause';
        }

        // Reset game
        function resetGame() {
            gameOverElement.style.display = 'none';
            init();
        }

        // Handle keyboard input
        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;

            const key = e.key.toLowerCase();
            
            // Prevent reverse direction
            if ((key === 'arrowleft' || key === 'a') && dx !== 1) {
                dx = -1;
                dy = 0;
            } else if ((key === 'arrowright' || key === 'd') && dx !== -1) {
                dx = 1;
                dy = 0;
            } else if ((key === 'arrowup' || key === 'w') && dy !== 1) {
                dx = 0;
                dy = -1;
            } else if ((key === 'arrowdown' || key === 's') && dy !== -1) {
                dx = 0;
                dy = 1;
            } else if (key === ' ') {
                e.preventDefault();
                togglePause();
            }
        });

        // Game loop
        function gameLoop() {
            update();
            draw();
            
            if (gameRunning) {
                // Dynamic speed based on score
                const speed = Math.max(80, 150 - Math.floor(score / 50) * 10);
                setTimeout(gameLoop, speed);
            }
        }

        // Start the game
        init();
    </script>
</body>
</html>
